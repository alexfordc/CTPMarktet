// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CTPMarket.CTPTickRecord.proto

#ifndef PROTOBUF_CTPMarket_2eCTPTickRecord_2eproto__INCLUDED
#define PROTOBUF_CTPMarket_2eCTPTickRecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CTPMarket {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CTPMarket_2eCTPTickRecord_2eproto();
void protobuf_AssignDesc_CTPMarket_2eCTPTickRecord_2eproto();
void protobuf_ShutdownFile_CTPMarket_2eCTPTickRecord_2eproto();

class CTPTickRecord;

// ===================================================================

class CTPTickRecord : public ::google::protobuf::Message {
 public:
  CTPTickRecord();
  virtual ~CTPTickRecord();

  CTPTickRecord(const CTPTickRecord& from);

  inline CTPTickRecord& operator=(const CTPTickRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CTPTickRecord& default_instance();

  void Swap(CTPTickRecord* other);

  // implements Message ----------------------------------------------

  CTPTickRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CTPTickRecord& from);
  void MergeFrom(const CTPTickRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TradingDay = 1;
  inline bool has_tradingday() const;
  inline void clear_tradingday();
  static const int kTradingDayFieldNumber = 1;
  inline const ::std::string& tradingday() const;
  inline void set_tradingday(const ::std::string& value);
  inline void set_tradingday(const char* value);
  inline void set_tradingday(const char* value, size_t size);
  inline ::std::string* mutable_tradingday();
  inline ::std::string* release_tradingday();
  inline void set_allocated_tradingday(::std::string* tradingday);

  // optional string InstrumentID = 2;
  inline bool has_instrumentid() const;
  inline void clear_instrumentid();
  static const int kInstrumentIDFieldNumber = 2;
  inline const ::std::string& instrumentid() const;
  inline void set_instrumentid(const ::std::string& value);
  inline void set_instrumentid(const char* value);
  inline void set_instrumentid(const char* value, size_t size);
  inline ::std::string* mutable_instrumentid();
  inline ::std::string* release_instrumentid();
  inline void set_allocated_instrumentid(::std::string* instrumentid);

  // optional string ExchangeID = 3;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIDFieldNumber = 3;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // optional string ExchangeInstID = 4;
  inline bool has_exchangeinstid() const;
  inline void clear_exchangeinstid();
  static const int kExchangeInstIDFieldNumber = 4;
  inline const ::std::string& exchangeinstid() const;
  inline void set_exchangeinstid(const ::std::string& value);
  inline void set_exchangeinstid(const char* value);
  inline void set_exchangeinstid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeinstid();
  inline ::std::string* release_exchangeinstid();
  inline void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // optional double LastPrice = 5;
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastPriceFieldNumber = 5;
  inline double lastprice() const;
  inline void set_lastprice(double value);

  // optional double PreSettlementPrice = 6;
  inline bool has_presettlementprice() const;
  inline void clear_presettlementprice();
  static const int kPreSettlementPriceFieldNumber = 6;
  inline double presettlementprice() const;
  inline void set_presettlementprice(double value);

  // optional double PreClosePrice = 7;
  inline bool has_precloseprice() const;
  inline void clear_precloseprice();
  static const int kPreClosePriceFieldNumber = 7;
  inline double precloseprice() const;
  inline void set_precloseprice(double value);

  // optional double PreOpenInterest = 8;
  inline bool has_preopeninterest() const;
  inline void clear_preopeninterest();
  static const int kPreOpenInterestFieldNumber = 8;
  inline double preopeninterest() const;
  inline void set_preopeninterest(double value);

  // optional double OpenPrice = 9;
  inline bool has_openprice() const;
  inline void clear_openprice();
  static const int kOpenPriceFieldNumber = 9;
  inline double openprice() const;
  inline void set_openprice(double value);

  // optional double HighestPrice = 10;
  inline bool has_highestprice() const;
  inline void clear_highestprice();
  static const int kHighestPriceFieldNumber = 10;
  inline double highestprice() const;
  inline void set_highestprice(double value);

  // optional double LowestPrice = 11;
  inline bool has_lowestprice() const;
  inline void clear_lowestprice();
  static const int kLowestPriceFieldNumber = 11;
  inline double lowestprice() const;
  inline void set_lowestprice(double value);

  // optional int32 Volume = 12;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 12;
  inline ::google::protobuf::int32 volume() const;
  inline void set_volume(::google::protobuf::int32 value);

  // optional double Turnover = 13;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 13;
  inline double turnover() const;
  inline void set_turnover(double value);

  // optional double OpenInterest = 14;
  inline bool has_openinterest() const;
  inline void clear_openinterest();
  static const int kOpenInterestFieldNumber = 14;
  inline double openinterest() const;
  inline void set_openinterest(double value);

  // optional double ClosePrice = 15;
  inline bool has_closeprice() const;
  inline void clear_closeprice();
  static const int kClosePriceFieldNumber = 15;
  inline double closeprice() const;
  inline void set_closeprice(double value);

  // optional double SettlementPrice = 16;
  inline bool has_settlementprice() const;
  inline void clear_settlementprice();
  static const int kSettlementPriceFieldNumber = 16;
  inline double settlementprice() const;
  inline void set_settlementprice(double value);

  // optional double UpperLimitPrice = 17;
  inline bool has_upperlimitprice() const;
  inline void clear_upperlimitprice();
  static const int kUpperLimitPriceFieldNumber = 17;
  inline double upperlimitprice() const;
  inline void set_upperlimitprice(double value);

  // optional double LowerLimitPrice = 18;
  inline bool has_lowerlimitprice() const;
  inline void clear_lowerlimitprice();
  static const int kLowerLimitPriceFieldNumber = 18;
  inline double lowerlimitprice() const;
  inline void set_lowerlimitprice(double value);

  // optional double PreDelta = 19;
  inline bool has_predelta() const;
  inline void clear_predelta();
  static const int kPreDeltaFieldNumber = 19;
  inline double predelta() const;
  inline void set_predelta(double value);

  // optional double CurrDelta = 20;
  inline bool has_currdelta() const;
  inline void clear_currdelta();
  static const int kCurrDeltaFieldNumber = 20;
  inline double currdelta() const;
  inline void set_currdelta(double value);

  // optional string UpdateTime = 21;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 21;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // optional int32 UpdateMillisec = 22;
  inline bool has_updatemillisec() const;
  inline void clear_updatemillisec();
  static const int kUpdateMillisecFieldNumber = 22;
  inline ::google::protobuf::int32 updatemillisec() const;
  inline void set_updatemillisec(::google::protobuf::int32 value);

  // optional double BidPrice1 = 23;
  inline bool has_bidprice1() const;
  inline void clear_bidprice1();
  static const int kBidPrice1FieldNumber = 23;
  inline double bidprice1() const;
  inline void set_bidprice1(double value);

  // optional int32 BidVolume1 = 24;
  inline bool has_bidvolume1() const;
  inline void clear_bidvolume1();
  static const int kBidVolume1FieldNumber = 24;
  inline ::google::protobuf::int32 bidvolume1() const;
  inline void set_bidvolume1(::google::protobuf::int32 value);

  // optional double AskPrice1 = 25;
  inline bool has_askprice1() const;
  inline void clear_askprice1();
  static const int kAskPrice1FieldNumber = 25;
  inline double askprice1() const;
  inline void set_askprice1(double value);

  // optional int32 AskVolume1 = 26;
  inline bool has_askvolume1() const;
  inline void clear_askvolume1();
  static const int kAskVolume1FieldNumber = 26;
  inline ::google::protobuf::int32 askvolume1() const;
  inline void set_askvolume1(::google::protobuf::int32 value);

  // optional double BidPrice2 = 27;
  inline bool has_bidprice2() const;
  inline void clear_bidprice2();
  static const int kBidPrice2FieldNumber = 27;
  inline double bidprice2() const;
  inline void set_bidprice2(double value);

  // optional int32 BidVolume2 = 28;
  inline bool has_bidvolume2() const;
  inline void clear_bidvolume2();
  static const int kBidVolume2FieldNumber = 28;
  inline ::google::protobuf::int32 bidvolume2() const;
  inline void set_bidvolume2(::google::protobuf::int32 value);

  // optional double AskPrice2 = 29;
  inline bool has_askprice2() const;
  inline void clear_askprice2();
  static const int kAskPrice2FieldNumber = 29;
  inline double askprice2() const;
  inline void set_askprice2(double value);

  // optional int32 AskVolume2 = 30;
  inline bool has_askvolume2() const;
  inline void clear_askvolume2();
  static const int kAskVolume2FieldNumber = 30;
  inline ::google::protobuf::int32 askvolume2() const;
  inline void set_askvolume2(::google::protobuf::int32 value);

  // optional double BidPrice3 = 31;
  inline bool has_bidprice3() const;
  inline void clear_bidprice3();
  static const int kBidPrice3FieldNumber = 31;
  inline double bidprice3() const;
  inline void set_bidprice3(double value);

  // optional int32 BidVolume3 = 32;
  inline bool has_bidvolume3() const;
  inline void clear_bidvolume3();
  static const int kBidVolume3FieldNumber = 32;
  inline ::google::protobuf::int32 bidvolume3() const;
  inline void set_bidvolume3(::google::protobuf::int32 value);

  // optional double AskPrice3 = 33;
  inline bool has_askprice3() const;
  inline void clear_askprice3();
  static const int kAskPrice3FieldNumber = 33;
  inline double askprice3() const;
  inline void set_askprice3(double value);

  // optional int32 AskVolume3 = 34;
  inline bool has_askvolume3() const;
  inline void clear_askvolume3();
  static const int kAskVolume3FieldNumber = 34;
  inline ::google::protobuf::int32 askvolume3() const;
  inline void set_askvolume3(::google::protobuf::int32 value);

  // optional double BidPrice4 = 35;
  inline bool has_bidprice4() const;
  inline void clear_bidprice4();
  static const int kBidPrice4FieldNumber = 35;
  inline double bidprice4() const;
  inline void set_bidprice4(double value);

  // optional int32 BidVolume4 = 36;
  inline bool has_bidvolume4() const;
  inline void clear_bidvolume4();
  static const int kBidVolume4FieldNumber = 36;
  inline ::google::protobuf::int32 bidvolume4() const;
  inline void set_bidvolume4(::google::protobuf::int32 value);

  // optional double AskPrice4 = 37;
  inline bool has_askprice4() const;
  inline void clear_askprice4();
  static const int kAskPrice4FieldNumber = 37;
  inline double askprice4() const;
  inline void set_askprice4(double value);

  // optional int32 AskVolume4 = 38;
  inline bool has_askvolume4() const;
  inline void clear_askvolume4();
  static const int kAskVolume4FieldNumber = 38;
  inline ::google::protobuf::int32 askvolume4() const;
  inline void set_askvolume4(::google::protobuf::int32 value);

  // optional double BidPrice5 = 39;
  inline bool has_bidprice5() const;
  inline void clear_bidprice5();
  static const int kBidPrice5FieldNumber = 39;
  inline double bidprice5() const;
  inline void set_bidprice5(double value);

  // optional int32 BidVolume5 = 40;
  inline bool has_bidvolume5() const;
  inline void clear_bidvolume5();
  static const int kBidVolume5FieldNumber = 40;
  inline ::google::protobuf::int32 bidvolume5() const;
  inline void set_bidvolume5(::google::protobuf::int32 value);

  // optional double AskPrice5 = 41;
  inline bool has_askprice5() const;
  inline void clear_askprice5();
  static const int kAskPrice5FieldNumber = 41;
  inline double askprice5() const;
  inline void set_askprice5(double value);

  // optional int32 AskVolume5 = 42;
  inline bool has_askvolume5() const;
  inline void clear_askvolume5();
  static const int kAskVolume5FieldNumber = 42;
  inline ::google::protobuf::int32 askvolume5() const;
  inline void set_askvolume5(::google::protobuf::int32 value);

  // optional double AveragePrice = 43;
  inline bool has_averageprice() const;
  inline void clear_averageprice();
  static const int kAveragePriceFieldNumber = 43;
  inline double averageprice() const;
  inline void set_averageprice(double value);

  // @@protoc_insertion_point(class_scope:CTPMarket.CTPTickRecord)
 private:
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_instrumentid();
  inline void clear_has_instrumentid();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_exchangeinstid();
  inline void clear_has_exchangeinstid();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_presettlementprice();
  inline void clear_has_presettlementprice();
  inline void set_has_precloseprice();
  inline void clear_has_precloseprice();
  inline void set_has_preopeninterest();
  inline void clear_has_preopeninterest();
  inline void set_has_openprice();
  inline void clear_has_openprice();
  inline void set_has_highestprice();
  inline void clear_has_highestprice();
  inline void set_has_lowestprice();
  inline void clear_has_lowestprice();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_closeprice();
  inline void clear_has_closeprice();
  inline void set_has_settlementprice();
  inline void clear_has_settlementprice();
  inline void set_has_upperlimitprice();
  inline void clear_has_upperlimitprice();
  inline void set_has_lowerlimitprice();
  inline void clear_has_lowerlimitprice();
  inline void set_has_predelta();
  inline void clear_has_predelta();
  inline void set_has_currdelta();
  inline void clear_has_currdelta();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_updatemillisec();
  inline void clear_has_updatemillisec();
  inline void set_has_bidprice1();
  inline void clear_has_bidprice1();
  inline void set_has_bidvolume1();
  inline void clear_has_bidvolume1();
  inline void set_has_askprice1();
  inline void clear_has_askprice1();
  inline void set_has_askvolume1();
  inline void clear_has_askvolume1();
  inline void set_has_bidprice2();
  inline void clear_has_bidprice2();
  inline void set_has_bidvolume2();
  inline void clear_has_bidvolume2();
  inline void set_has_askprice2();
  inline void clear_has_askprice2();
  inline void set_has_askvolume2();
  inline void clear_has_askvolume2();
  inline void set_has_bidprice3();
  inline void clear_has_bidprice3();
  inline void set_has_bidvolume3();
  inline void clear_has_bidvolume3();
  inline void set_has_askprice3();
  inline void clear_has_askprice3();
  inline void set_has_askvolume3();
  inline void clear_has_askvolume3();
  inline void set_has_bidprice4();
  inline void clear_has_bidprice4();
  inline void set_has_bidvolume4();
  inline void clear_has_bidvolume4();
  inline void set_has_askprice4();
  inline void clear_has_askprice4();
  inline void set_has_askvolume4();
  inline void clear_has_askvolume4();
  inline void set_has_bidprice5();
  inline void clear_has_bidprice5();
  inline void set_has_bidvolume5();
  inline void clear_has_bidvolume5();
  inline void set_has_askprice5();
  inline void clear_has_askprice5();
  inline void set_has_askvolume5();
  inline void clear_has_askvolume5();
  inline void set_has_averageprice();
  inline void clear_has_averageprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tradingday_;
  ::std::string* instrumentid_;
  ::std::string* exchangeid_;
  ::std::string* exchangeinstid_;
  double lastprice_;
  double presettlementprice_;
  double precloseprice_;
  double preopeninterest_;
  double openprice_;
  double highestprice_;
  double lowestprice_;
  double turnover_;
  double openinterest_;
  double closeprice_;
  double settlementprice_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 updatemillisec_;
  double upperlimitprice_;
  double lowerlimitprice_;
  double predelta_;
  double currdelta_;
  ::std::string* updatetime_;
  double bidprice1_;
  double askprice1_;
  ::google::protobuf::int32 bidvolume1_;
  ::google::protobuf::int32 askvolume1_;
  double bidprice2_;
  double askprice2_;
  ::google::protobuf::int32 bidvolume2_;
  ::google::protobuf::int32 askvolume2_;
  double bidprice3_;
  double askprice3_;
  ::google::protobuf::int32 bidvolume3_;
  ::google::protobuf::int32 askvolume3_;
  double bidprice4_;
  double askprice4_;
  ::google::protobuf::int32 bidvolume4_;
  ::google::protobuf::int32 askvolume4_;
  double bidprice5_;
  double askprice5_;
  ::google::protobuf::int32 bidvolume5_;
  ::google::protobuf::int32 askvolume5_;
  double averageprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(43 + 31) / 32];

  friend void  protobuf_AddDesc_CTPMarket_2eCTPTickRecord_2eproto();
  friend void protobuf_AssignDesc_CTPMarket_2eCTPTickRecord_2eproto();
  friend void protobuf_ShutdownFile_CTPMarket_2eCTPTickRecord_2eproto();

  void InitAsDefaultInstance();
  static CTPTickRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// CTPTickRecord

// optional string TradingDay = 1;
inline bool CTPTickRecord::has_tradingday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CTPTickRecord::set_has_tradingday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CTPTickRecord::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CTPTickRecord::clear_tradingday() {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    tradingday_->clear();
  }
  clear_has_tradingday();
}
inline const ::std::string& CTPTickRecord::tradingday() const {
  return *tradingday_;
}
inline void CTPTickRecord::set_tradingday(const ::std::string& value) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(value);
}
inline void CTPTickRecord::set_tradingday(const char* value) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(value);
}
inline void CTPTickRecord::set_tradingday(const char* value, size_t size) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CTPTickRecord::mutable_tradingday() {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  return tradingday_;
}
inline ::std::string* CTPTickRecord::release_tradingday() {
  clear_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tradingday_;
    tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CTPTickRecord::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (tradingday) {
    set_has_tradingday();
    tradingday_ = tradingday;
  } else {
    clear_has_tradingday();
    tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string InstrumentID = 2;
inline bool CTPTickRecord::has_instrumentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CTPTickRecord::set_has_instrumentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CTPTickRecord::clear_has_instrumentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CTPTickRecord::clear_instrumentid() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    instrumentid_->clear();
  }
  clear_has_instrumentid();
}
inline const ::std::string& CTPTickRecord::instrumentid() const {
  return *instrumentid_;
}
inline void CTPTickRecord::set_instrumentid(const ::std::string& value) {
  set_has_instrumentid();
  if (instrumentid_ == &::google::protobuf::internal::kEmptyString) {
    instrumentid_ = new ::std::string;
  }
  instrumentid_->assign(value);
}
inline void CTPTickRecord::set_instrumentid(const char* value) {
  set_has_instrumentid();
  if (instrumentid_ == &::google::protobuf::internal::kEmptyString) {
    instrumentid_ = new ::std::string;
  }
  instrumentid_->assign(value);
}
inline void CTPTickRecord::set_instrumentid(const char* value, size_t size) {
  set_has_instrumentid();
  if (instrumentid_ == &::google::protobuf::internal::kEmptyString) {
    instrumentid_ = new ::std::string;
  }
  instrumentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CTPTickRecord::mutable_instrumentid() {
  set_has_instrumentid();
  if (instrumentid_ == &::google::protobuf::internal::kEmptyString) {
    instrumentid_ = new ::std::string;
  }
  return instrumentid_;
}
inline ::std::string* CTPTickRecord::release_instrumentid() {
  clear_has_instrumentid();
  if (instrumentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instrumentid_;
    instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CTPTickRecord::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (instrumentid) {
    set_has_instrumentid();
    instrumentid_ = instrumentid;
  } else {
    clear_has_instrumentid();
    instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ExchangeID = 3;
inline bool CTPTickRecord::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CTPTickRecord::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CTPTickRecord::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CTPTickRecord::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& CTPTickRecord::exchangeid() const {
  return *exchangeid_;
}
inline void CTPTickRecord::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
}
inline void CTPTickRecord::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
}
inline void CTPTickRecord::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CTPTickRecord::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  return exchangeid_;
}
inline ::std::string* CTPTickRecord::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CTPTickRecord::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ExchangeInstID = 4;
inline bool CTPTickRecord::has_exchangeinstid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CTPTickRecord::set_has_exchangeinstid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CTPTickRecord::clear_has_exchangeinstid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CTPTickRecord::clear_exchangeinstid() {
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_->clear();
  }
  clear_has_exchangeinstid();
}
inline const ::std::string& CTPTickRecord::exchangeinstid() const {
  return *exchangeinstid_;
}
inline void CTPTickRecord::set_exchangeinstid(const ::std::string& value) {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  exchangeinstid_->assign(value);
}
inline void CTPTickRecord::set_exchangeinstid(const char* value) {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  exchangeinstid_->assign(value);
}
inline void CTPTickRecord::set_exchangeinstid(const char* value, size_t size) {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  exchangeinstid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CTPTickRecord::mutable_exchangeinstid() {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  return exchangeinstid_;
}
inline ::std::string* CTPTickRecord::release_exchangeinstid() {
  clear_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchangeinstid_;
    exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CTPTickRecord::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (exchangeinstid) {
    set_has_exchangeinstid();
    exchangeinstid_ = exchangeinstid;
  } else {
    clear_has_exchangeinstid();
    exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double LastPrice = 5;
inline bool CTPTickRecord::has_lastprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CTPTickRecord::set_has_lastprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CTPTickRecord::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CTPTickRecord::clear_lastprice() {
  lastprice_ = 0;
  clear_has_lastprice();
}
inline double CTPTickRecord::lastprice() const {
  return lastprice_;
}
inline void CTPTickRecord::set_lastprice(double value) {
  set_has_lastprice();
  lastprice_ = value;
}

// optional double PreSettlementPrice = 6;
inline bool CTPTickRecord::has_presettlementprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CTPTickRecord::set_has_presettlementprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CTPTickRecord::clear_has_presettlementprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CTPTickRecord::clear_presettlementprice() {
  presettlementprice_ = 0;
  clear_has_presettlementprice();
}
inline double CTPTickRecord::presettlementprice() const {
  return presettlementprice_;
}
inline void CTPTickRecord::set_presettlementprice(double value) {
  set_has_presettlementprice();
  presettlementprice_ = value;
}

// optional double PreClosePrice = 7;
inline bool CTPTickRecord::has_precloseprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CTPTickRecord::set_has_precloseprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CTPTickRecord::clear_has_precloseprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CTPTickRecord::clear_precloseprice() {
  precloseprice_ = 0;
  clear_has_precloseprice();
}
inline double CTPTickRecord::precloseprice() const {
  return precloseprice_;
}
inline void CTPTickRecord::set_precloseprice(double value) {
  set_has_precloseprice();
  precloseprice_ = value;
}

// optional double PreOpenInterest = 8;
inline bool CTPTickRecord::has_preopeninterest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CTPTickRecord::set_has_preopeninterest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CTPTickRecord::clear_has_preopeninterest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CTPTickRecord::clear_preopeninterest() {
  preopeninterest_ = 0;
  clear_has_preopeninterest();
}
inline double CTPTickRecord::preopeninterest() const {
  return preopeninterest_;
}
inline void CTPTickRecord::set_preopeninterest(double value) {
  set_has_preopeninterest();
  preopeninterest_ = value;
}

// optional double OpenPrice = 9;
inline bool CTPTickRecord::has_openprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CTPTickRecord::set_has_openprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CTPTickRecord::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CTPTickRecord::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
inline double CTPTickRecord::openprice() const {
  return openprice_;
}
inline void CTPTickRecord::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
}

// optional double HighestPrice = 10;
inline bool CTPTickRecord::has_highestprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CTPTickRecord::set_has_highestprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CTPTickRecord::clear_has_highestprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CTPTickRecord::clear_highestprice() {
  highestprice_ = 0;
  clear_has_highestprice();
}
inline double CTPTickRecord::highestprice() const {
  return highestprice_;
}
inline void CTPTickRecord::set_highestprice(double value) {
  set_has_highestprice();
  highestprice_ = value;
}

// optional double LowestPrice = 11;
inline bool CTPTickRecord::has_lowestprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CTPTickRecord::set_has_lowestprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CTPTickRecord::clear_has_lowestprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CTPTickRecord::clear_lowestprice() {
  lowestprice_ = 0;
  clear_has_lowestprice();
}
inline double CTPTickRecord::lowestprice() const {
  return lowestprice_;
}
inline void CTPTickRecord::set_lowestprice(double value) {
  set_has_lowestprice();
  lowestprice_ = value;
}

// optional int32 Volume = 12;
inline bool CTPTickRecord::has_volume() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CTPTickRecord::set_has_volume() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CTPTickRecord::clear_has_volume() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CTPTickRecord::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline ::google::protobuf::int32 CTPTickRecord::volume() const {
  return volume_;
}
inline void CTPTickRecord::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
}

// optional double Turnover = 13;
inline bool CTPTickRecord::has_turnover() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CTPTickRecord::set_has_turnover() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CTPTickRecord::clear_has_turnover() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CTPTickRecord::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double CTPTickRecord::turnover() const {
  return turnover_;
}
inline void CTPTickRecord::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
}

// optional double OpenInterest = 14;
inline bool CTPTickRecord::has_openinterest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CTPTickRecord::set_has_openinterest() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CTPTickRecord::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CTPTickRecord::clear_openinterest() {
  openinterest_ = 0;
  clear_has_openinterest();
}
inline double CTPTickRecord::openinterest() const {
  return openinterest_;
}
inline void CTPTickRecord::set_openinterest(double value) {
  set_has_openinterest();
  openinterest_ = value;
}

// optional double ClosePrice = 15;
inline bool CTPTickRecord::has_closeprice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CTPTickRecord::set_has_closeprice() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CTPTickRecord::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CTPTickRecord::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
inline double CTPTickRecord::closeprice() const {
  return closeprice_;
}
inline void CTPTickRecord::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
}

// optional double SettlementPrice = 16;
inline bool CTPTickRecord::has_settlementprice() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CTPTickRecord::set_has_settlementprice() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CTPTickRecord::clear_has_settlementprice() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CTPTickRecord::clear_settlementprice() {
  settlementprice_ = 0;
  clear_has_settlementprice();
}
inline double CTPTickRecord::settlementprice() const {
  return settlementprice_;
}
inline void CTPTickRecord::set_settlementprice(double value) {
  set_has_settlementprice();
  settlementprice_ = value;
}

// optional double UpperLimitPrice = 17;
inline bool CTPTickRecord::has_upperlimitprice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CTPTickRecord::set_has_upperlimitprice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CTPTickRecord::clear_has_upperlimitprice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CTPTickRecord::clear_upperlimitprice() {
  upperlimitprice_ = 0;
  clear_has_upperlimitprice();
}
inline double CTPTickRecord::upperlimitprice() const {
  return upperlimitprice_;
}
inline void CTPTickRecord::set_upperlimitprice(double value) {
  set_has_upperlimitprice();
  upperlimitprice_ = value;
}

// optional double LowerLimitPrice = 18;
inline bool CTPTickRecord::has_lowerlimitprice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CTPTickRecord::set_has_lowerlimitprice() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CTPTickRecord::clear_has_lowerlimitprice() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CTPTickRecord::clear_lowerlimitprice() {
  lowerlimitprice_ = 0;
  clear_has_lowerlimitprice();
}
inline double CTPTickRecord::lowerlimitprice() const {
  return lowerlimitprice_;
}
inline void CTPTickRecord::set_lowerlimitprice(double value) {
  set_has_lowerlimitprice();
  lowerlimitprice_ = value;
}

// optional double PreDelta = 19;
inline bool CTPTickRecord::has_predelta() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CTPTickRecord::set_has_predelta() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CTPTickRecord::clear_has_predelta() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CTPTickRecord::clear_predelta() {
  predelta_ = 0;
  clear_has_predelta();
}
inline double CTPTickRecord::predelta() const {
  return predelta_;
}
inline void CTPTickRecord::set_predelta(double value) {
  set_has_predelta();
  predelta_ = value;
}

// optional double CurrDelta = 20;
inline bool CTPTickRecord::has_currdelta() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CTPTickRecord::set_has_currdelta() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CTPTickRecord::clear_has_currdelta() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CTPTickRecord::clear_currdelta() {
  currdelta_ = 0;
  clear_has_currdelta();
}
inline double CTPTickRecord::currdelta() const {
  return currdelta_;
}
inline void CTPTickRecord::set_currdelta(double value) {
  set_has_currdelta();
  currdelta_ = value;
}

// optional string UpdateTime = 21;
inline bool CTPTickRecord::has_updatetime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CTPTickRecord::set_has_updatetime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CTPTickRecord::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CTPTickRecord::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& CTPTickRecord::updatetime() const {
  return *updatetime_;
}
inline void CTPTickRecord::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void CTPTickRecord::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void CTPTickRecord::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CTPTickRecord::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* CTPTickRecord::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CTPTickRecord::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 UpdateMillisec = 22;
inline bool CTPTickRecord::has_updatemillisec() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CTPTickRecord::set_has_updatemillisec() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CTPTickRecord::clear_has_updatemillisec() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CTPTickRecord::clear_updatemillisec() {
  updatemillisec_ = 0;
  clear_has_updatemillisec();
}
inline ::google::protobuf::int32 CTPTickRecord::updatemillisec() const {
  return updatemillisec_;
}
inline void CTPTickRecord::set_updatemillisec(::google::protobuf::int32 value) {
  set_has_updatemillisec();
  updatemillisec_ = value;
}

// optional double BidPrice1 = 23;
inline bool CTPTickRecord::has_bidprice1() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CTPTickRecord::set_has_bidprice1() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CTPTickRecord::clear_has_bidprice1() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CTPTickRecord::clear_bidprice1() {
  bidprice1_ = 0;
  clear_has_bidprice1();
}
inline double CTPTickRecord::bidprice1() const {
  return bidprice1_;
}
inline void CTPTickRecord::set_bidprice1(double value) {
  set_has_bidprice1();
  bidprice1_ = value;
}

// optional int32 BidVolume1 = 24;
inline bool CTPTickRecord::has_bidvolume1() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CTPTickRecord::set_has_bidvolume1() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CTPTickRecord::clear_has_bidvolume1() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CTPTickRecord::clear_bidvolume1() {
  bidvolume1_ = 0;
  clear_has_bidvolume1();
}
inline ::google::protobuf::int32 CTPTickRecord::bidvolume1() const {
  return bidvolume1_;
}
inline void CTPTickRecord::set_bidvolume1(::google::protobuf::int32 value) {
  set_has_bidvolume1();
  bidvolume1_ = value;
}

// optional double AskPrice1 = 25;
inline bool CTPTickRecord::has_askprice1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CTPTickRecord::set_has_askprice1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CTPTickRecord::clear_has_askprice1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CTPTickRecord::clear_askprice1() {
  askprice1_ = 0;
  clear_has_askprice1();
}
inline double CTPTickRecord::askprice1() const {
  return askprice1_;
}
inline void CTPTickRecord::set_askprice1(double value) {
  set_has_askprice1();
  askprice1_ = value;
}

// optional int32 AskVolume1 = 26;
inline bool CTPTickRecord::has_askvolume1() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CTPTickRecord::set_has_askvolume1() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CTPTickRecord::clear_has_askvolume1() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CTPTickRecord::clear_askvolume1() {
  askvolume1_ = 0;
  clear_has_askvolume1();
}
inline ::google::protobuf::int32 CTPTickRecord::askvolume1() const {
  return askvolume1_;
}
inline void CTPTickRecord::set_askvolume1(::google::protobuf::int32 value) {
  set_has_askvolume1();
  askvolume1_ = value;
}

// optional double BidPrice2 = 27;
inline bool CTPTickRecord::has_bidprice2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CTPTickRecord::set_has_bidprice2() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CTPTickRecord::clear_has_bidprice2() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CTPTickRecord::clear_bidprice2() {
  bidprice2_ = 0;
  clear_has_bidprice2();
}
inline double CTPTickRecord::bidprice2() const {
  return bidprice2_;
}
inline void CTPTickRecord::set_bidprice2(double value) {
  set_has_bidprice2();
  bidprice2_ = value;
}

// optional int32 BidVolume2 = 28;
inline bool CTPTickRecord::has_bidvolume2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CTPTickRecord::set_has_bidvolume2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CTPTickRecord::clear_has_bidvolume2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CTPTickRecord::clear_bidvolume2() {
  bidvolume2_ = 0;
  clear_has_bidvolume2();
}
inline ::google::protobuf::int32 CTPTickRecord::bidvolume2() const {
  return bidvolume2_;
}
inline void CTPTickRecord::set_bidvolume2(::google::protobuf::int32 value) {
  set_has_bidvolume2();
  bidvolume2_ = value;
}

// optional double AskPrice2 = 29;
inline bool CTPTickRecord::has_askprice2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CTPTickRecord::set_has_askprice2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CTPTickRecord::clear_has_askprice2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CTPTickRecord::clear_askprice2() {
  askprice2_ = 0;
  clear_has_askprice2();
}
inline double CTPTickRecord::askprice2() const {
  return askprice2_;
}
inline void CTPTickRecord::set_askprice2(double value) {
  set_has_askprice2();
  askprice2_ = value;
}

// optional int32 AskVolume2 = 30;
inline bool CTPTickRecord::has_askvolume2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CTPTickRecord::set_has_askvolume2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CTPTickRecord::clear_has_askvolume2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CTPTickRecord::clear_askvolume2() {
  askvolume2_ = 0;
  clear_has_askvolume2();
}
inline ::google::protobuf::int32 CTPTickRecord::askvolume2() const {
  return askvolume2_;
}
inline void CTPTickRecord::set_askvolume2(::google::protobuf::int32 value) {
  set_has_askvolume2();
  askvolume2_ = value;
}

// optional double BidPrice3 = 31;
inline bool CTPTickRecord::has_bidprice3() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CTPTickRecord::set_has_bidprice3() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CTPTickRecord::clear_has_bidprice3() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CTPTickRecord::clear_bidprice3() {
  bidprice3_ = 0;
  clear_has_bidprice3();
}
inline double CTPTickRecord::bidprice3() const {
  return bidprice3_;
}
inline void CTPTickRecord::set_bidprice3(double value) {
  set_has_bidprice3();
  bidprice3_ = value;
}

// optional int32 BidVolume3 = 32;
inline bool CTPTickRecord::has_bidvolume3() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CTPTickRecord::set_has_bidvolume3() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CTPTickRecord::clear_has_bidvolume3() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CTPTickRecord::clear_bidvolume3() {
  bidvolume3_ = 0;
  clear_has_bidvolume3();
}
inline ::google::protobuf::int32 CTPTickRecord::bidvolume3() const {
  return bidvolume3_;
}
inline void CTPTickRecord::set_bidvolume3(::google::protobuf::int32 value) {
  set_has_bidvolume3();
  bidvolume3_ = value;
}

// optional double AskPrice3 = 33;
inline bool CTPTickRecord::has_askprice3() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CTPTickRecord::set_has_askprice3() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CTPTickRecord::clear_has_askprice3() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CTPTickRecord::clear_askprice3() {
  askprice3_ = 0;
  clear_has_askprice3();
}
inline double CTPTickRecord::askprice3() const {
  return askprice3_;
}
inline void CTPTickRecord::set_askprice3(double value) {
  set_has_askprice3();
  askprice3_ = value;
}

// optional int32 AskVolume3 = 34;
inline bool CTPTickRecord::has_askvolume3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CTPTickRecord::set_has_askvolume3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CTPTickRecord::clear_has_askvolume3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CTPTickRecord::clear_askvolume3() {
  askvolume3_ = 0;
  clear_has_askvolume3();
}
inline ::google::protobuf::int32 CTPTickRecord::askvolume3() const {
  return askvolume3_;
}
inline void CTPTickRecord::set_askvolume3(::google::protobuf::int32 value) {
  set_has_askvolume3();
  askvolume3_ = value;
}

// optional double BidPrice4 = 35;
inline bool CTPTickRecord::has_bidprice4() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CTPTickRecord::set_has_bidprice4() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CTPTickRecord::clear_has_bidprice4() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CTPTickRecord::clear_bidprice4() {
  bidprice4_ = 0;
  clear_has_bidprice4();
}
inline double CTPTickRecord::bidprice4() const {
  return bidprice4_;
}
inline void CTPTickRecord::set_bidprice4(double value) {
  set_has_bidprice4();
  bidprice4_ = value;
}

// optional int32 BidVolume4 = 36;
inline bool CTPTickRecord::has_bidvolume4() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CTPTickRecord::set_has_bidvolume4() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CTPTickRecord::clear_has_bidvolume4() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CTPTickRecord::clear_bidvolume4() {
  bidvolume4_ = 0;
  clear_has_bidvolume4();
}
inline ::google::protobuf::int32 CTPTickRecord::bidvolume4() const {
  return bidvolume4_;
}
inline void CTPTickRecord::set_bidvolume4(::google::protobuf::int32 value) {
  set_has_bidvolume4();
  bidvolume4_ = value;
}

// optional double AskPrice4 = 37;
inline bool CTPTickRecord::has_askprice4() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CTPTickRecord::set_has_askprice4() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CTPTickRecord::clear_has_askprice4() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CTPTickRecord::clear_askprice4() {
  askprice4_ = 0;
  clear_has_askprice4();
}
inline double CTPTickRecord::askprice4() const {
  return askprice4_;
}
inline void CTPTickRecord::set_askprice4(double value) {
  set_has_askprice4();
  askprice4_ = value;
}

// optional int32 AskVolume4 = 38;
inline bool CTPTickRecord::has_askvolume4() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CTPTickRecord::set_has_askvolume4() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CTPTickRecord::clear_has_askvolume4() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CTPTickRecord::clear_askvolume4() {
  askvolume4_ = 0;
  clear_has_askvolume4();
}
inline ::google::protobuf::int32 CTPTickRecord::askvolume4() const {
  return askvolume4_;
}
inline void CTPTickRecord::set_askvolume4(::google::protobuf::int32 value) {
  set_has_askvolume4();
  askvolume4_ = value;
}

// optional double BidPrice5 = 39;
inline bool CTPTickRecord::has_bidprice5() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CTPTickRecord::set_has_bidprice5() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CTPTickRecord::clear_has_bidprice5() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CTPTickRecord::clear_bidprice5() {
  bidprice5_ = 0;
  clear_has_bidprice5();
}
inline double CTPTickRecord::bidprice5() const {
  return bidprice5_;
}
inline void CTPTickRecord::set_bidprice5(double value) {
  set_has_bidprice5();
  bidprice5_ = value;
}

// optional int32 BidVolume5 = 40;
inline bool CTPTickRecord::has_bidvolume5() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CTPTickRecord::set_has_bidvolume5() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CTPTickRecord::clear_has_bidvolume5() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CTPTickRecord::clear_bidvolume5() {
  bidvolume5_ = 0;
  clear_has_bidvolume5();
}
inline ::google::protobuf::int32 CTPTickRecord::bidvolume5() const {
  return bidvolume5_;
}
inline void CTPTickRecord::set_bidvolume5(::google::protobuf::int32 value) {
  set_has_bidvolume5();
  bidvolume5_ = value;
}

// optional double AskPrice5 = 41;
inline bool CTPTickRecord::has_askprice5() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CTPTickRecord::set_has_askprice5() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CTPTickRecord::clear_has_askprice5() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CTPTickRecord::clear_askprice5() {
  askprice5_ = 0;
  clear_has_askprice5();
}
inline double CTPTickRecord::askprice5() const {
  return askprice5_;
}
inline void CTPTickRecord::set_askprice5(double value) {
  set_has_askprice5();
  askprice5_ = value;
}

// optional int32 AskVolume5 = 42;
inline bool CTPTickRecord::has_askvolume5() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CTPTickRecord::set_has_askvolume5() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CTPTickRecord::clear_has_askvolume5() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CTPTickRecord::clear_askvolume5() {
  askvolume5_ = 0;
  clear_has_askvolume5();
}
inline ::google::protobuf::int32 CTPTickRecord::askvolume5() const {
  return askvolume5_;
}
inline void CTPTickRecord::set_askvolume5(::google::protobuf::int32 value) {
  set_has_askvolume5();
  askvolume5_ = value;
}

// optional double AveragePrice = 43;
inline bool CTPTickRecord::has_averageprice() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CTPTickRecord::set_has_averageprice() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CTPTickRecord::clear_has_averageprice() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CTPTickRecord::clear_averageprice() {
  averageprice_ = 0;
  clear_has_averageprice();
}
inline double CTPTickRecord::averageprice() const {
  return averageprice_;
}
inline void CTPTickRecord::set_averageprice(double value) {
  set_has_averageprice();
  averageprice_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CTPMarket

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CTPMarket_2eCTPTickRecord_2eproto__INCLUDED
