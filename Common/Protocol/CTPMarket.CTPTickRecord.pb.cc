// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CTPMarket.CTPTickRecord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CTPMarket.CTPTickRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CTPMarket {

namespace {

const ::google::protobuf::Descriptor* CTPTickRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTPTickRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CTPMarket_2eCTPTickRecord_2eproto() {
  protobuf_AddDesc_CTPMarket_2eCTPTickRecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CTPMarket.CTPTickRecord.proto");
  GOOGLE_CHECK(file != NULL);
  CTPTickRecord_descriptor_ = file->message_type(0);
  static const int CTPTickRecord_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, precloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, highestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, lowestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, upperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, lowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, predelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, currdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, updatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, bidvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, askvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, averageprice_),
  };
  CTPTickRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTPTickRecord_descriptor_,
      CTPTickRecord::default_instance_,
      CTPTickRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTPTickRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTPTickRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CTPMarket_2eCTPTickRecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTPTickRecord_descriptor_, &CTPTickRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CTPMarket_2eCTPTickRecord_2eproto() {
  delete CTPTickRecord::default_instance_;
  delete CTPTickRecord_reflection_;
}

void protobuf_AddDesc_CTPMarket_2eCTPTickRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035CTPMarket.CTPTickRecord.proto\022\tCTPMark"
    "et\"\206\007\n\rCTPTickRecord\022\022\n\nTradingDay\030\001 \001(\t"
    "\022\024\n\014InstrumentID\030\002 \001(\t\022\022\n\nExchangeID\030\003 \001"
    "(\t\022\026\n\016ExchangeInstID\030\004 \001(\t\022\021\n\tLastPrice\030"
    "\005 \001(\001\022\032\n\022PreSettlementPrice\030\006 \001(\001\022\025\n\rPre"
    "ClosePrice\030\007 \001(\001\022\027\n\017PreOpenInterest\030\010 \001("
    "\001\022\021\n\tOpenPrice\030\t \001(\001\022\024\n\014HighestPrice\030\n \001"
    "(\001\022\023\n\013LowestPrice\030\013 \001(\001\022\016\n\006Volume\030\014 \001(\005\022"
    "\020\n\010Turnover\030\r \001(\001\022\024\n\014OpenInterest\030\016 \001(\001\022"
    "\022\n\nClosePrice\030\017 \001(\001\022\027\n\017SettlementPrice\030\020"
    " \001(\001\022\027\n\017UpperLimitPrice\030\021 \001(\001\022\027\n\017LowerLi"
    "mitPrice\030\022 \001(\001\022\020\n\010PreDelta\030\023 \001(\001\022\021\n\tCurr"
    "Delta\030\024 \001(\001\022\022\n\nUpdateTime\030\025 \001(\t\022\026\n\016Updat"
    "eMillisec\030\026 \001(\005\022\021\n\tBidPrice1\030\027 \001(\001\022\022\n\nBi"
    "dVolume1\030\030 \001(\005\022\021\n\tAskPrice1\030\031 \001(\001\022\022\n\nAsk"
    "Volume1\030\032 \001(\005\022\021\n\tBidPrice2\030\033 \001(\001\022\022\n\nBidV"
    "olume2\030\034 \001(\005\022\021\n\tAskPrice2\030\035 \001(\001\022\022\n\nAskVo"
    "lume2\030\036 \001(\005\022\021\n\tBidPrice3\030\037 \001(\001\022\022\n\nBidVol"
    "ume3\030  \001(\005\022\021\n\tAskPrice3\030! \001(\001\022\022\n\nAskVolu"
    "me3\030\" \001(\005\022\021\n\tBidPrice4\030# \001(\001\022\022\n\nBidVolum"
    "e4\030$ \001(\005\022\021\n\tAskPrice4\030% \001(\001\022\022\n\nAskVolume"
    "4\030& \001(\005\022\021\n\tBidPrice5\030\' \001(\001\022\022\n\nBidVolume5"
    "\030( \001(\005\022\021\n\tAskPrice5\030) \001(\001\022\022\n\nAskVolume5\030"
    "* \001(\005\022\024\n\014AveragePrice\030+ \001(\001", 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CTPMarket.CTPTickRecord.proto", &protobuf_RegisterTypes);
  CTPTickRecord::default_instance_ = new CTPTickRecord();
  CTPTickRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CTPMarket_2eCTPTickRecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CTPMarket_2eCTPTickRecord_2eproto {
  StaticDescriptorInitializer_CTPMarket_2eCTPTickRecord_2eproto() {
    protobuf_AddDesc_CTPMarket_2eCTPTickRecord_2eproto();
  }
} static_descriptor_initializer_CTPMarket_2eCTPTickRecord_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CTPTickRecord::kTradingDayFieldNumber;
const int CTPTickRecord::kInstrumentIDFieldNumber;
const int CTPTickRecord::kExchangeIDFieldNumber;
const int CTPTickRecord::kExchangeInstIDFieldNumber;
const int CTPTickRecord::kLastPriceFieldNumber;
const int CTPTickRecord::kPreSettlementPriceFieldNumber;
const int CTPTickRecord::kPreClosePriceFieldNumber;
const int CTPTickRecord::kPreOpenInterestFieldNumber;
const int CTPTickRecord::kOpenPriceFieldNumber;
const int CTPTickRecord::kHighestPriceFieldNumber;
const int CTPTickRecord::kLowestPriceFieldNumber;
const int CTPTickRecord::kVolumeFieldNumber;
const int CTPTickRecord::kTurnoverFieldNumber;
const int CTPTickRecord::kOpenInterestFieldNumber;
const int CTPTickRecord::kClosePriceFieldNumber;
const int CTPTickRecord::kSettlementPriceFieldNumber;
const int CTPTickRecord::kUpperLimitPriceFieldNumber;
const int CTPTickRecord::kLowerLimitPriceFieldNumber;
const int CTPTickRecord::kPreDeltaFieldNumber;
const int CTPTickRecord::kCurrDeltaFieldNumber;
const int CTPTickRecord::kUpdateTimeFieldNumber;
const int CTPTickRecord::kUpdateMillisecFieldNumber;
const int CTPTickRecord::kBidPrice1FieldNumber;
const int CTPTickRecord::kBidVolume1FieldNumber;
const int CTPTickRecord::kAskPrice1FieldNumber;
const int CTPTickRecord::kAskVolume1FieldNumber;
const int CTPTickRecord::kBidPrice2FieldNumber;
const int CTPTickRecord::kBidVolume2FieldNumber;
const int CTPTickRecord::kAskPrice2FieldNumber;
const int CTPTickRecord::kAskVolume2FieldNumber;
const int CTPTickRecord::kBidPrice3FieldNumber;
const int CTPTickRecord::kBidVolume3FieldNumber;
const int CTPTickRecord::kAskPrice3FieldNumber;
const int CTPTickRecord::kAskVolume3FieldNumber;
const int CTPTickRecord::kBidPrice4FieldNumber;
const int CTPTickRecord::kBidVolume4FieldNumber;
const int CTPTickRecord::kAskPrice4FieldNumber;
const int CTPTickRecord::kAskVolume4FieldNumber;
const int CTPTickRecord::kBidPrice5FieldNumber;
const int CTPTickRecord::kBidVolume5FieldNumber;
const int CTPTickRecord::kAskPrice5FieldNumber;
const int CTPTickRecord::kAskVolume5FieldNumber;
const int CTPTickRecord::kAveragePriceFieldNumber;
#endif  // !_MSC_VER

CTPTickRecord::CTPTickRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTPTickRecord::InitAsDefaultInstance() {
}

CTPTickRecord::CTPTickRecord(const CTPTickRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTPTickRecord::SharedCtor() {
  _cached_size_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastprice_ = 0;
  presettlementprice_ = 0;
  precloseprice_ = 0;
  preopeninterest_ = 0;
  openprice_ = 0;
  highestprice_ = 0;
  lowestprice_ = 0;
  volume_ = 0;
  turnover_ = 0;
  openinterest_ = 0;
  closeprice_ = 0;
  settlementprice_ = 0;
  upperlimitprice_ = 0;
  lowerlimitprice_ = 0;
  predelta_ = 0;
  currdelta_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatemillisec_ = 0;
  bidprice1_ = 0;
  bidvolume1_ = 0;
  askprice1_ = 0;
  askvolume1_ = 0;
  bidprice2_ = 0;
  bidvolume2_ = 0;
  askprice2_ = 0;
  askvolume2_ = 0;
  bidprice3_ = 0;
  bidvolume3_ = 0;
  askprice3_ = 0;
  askvolume3_ = 0;
  bidprice4_ = 0;
  bidvolume4_ = 0;
  askprice4_ = 0;
  askvolume4_ = 0;
  bidprice5_ = 0;
  bidvolume5_ = 0;
  askprice5_ = 0;
  askvolume5_ = 0;
  averageprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTPTickRecord::~CTPTickRecord() {
  SharedDtor();
}

void CTPTickRecord::SharedDtor() {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void CTPTickRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTPTickRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTPTickRecord_descriptor_;
}

const CTPTickRecord& CTPTickRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTPMarket_2eCTPTickRecord_2eproto();
  return *default_instance_;
}

CTPTickRecord* CTPTickRecord::default_instance_ = NULL;

CTPTickRecord* CTPTickRecord::New() const {
  return new CTPTickRecord;
}

void CTPTickRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    lastprice_ = 0;
    presettlementprice_ = 0;
    precloseprice_ = 0;
    preopeninterest_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    openprice_ = 0;
    highestprice_ = 0;
    lowestprice_ = 0;
    volume_ = 0;
    turnover_ = 0;
    openinterest_ = 0;
    closeprice_ = 0;
    settlementprice_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    upperlimitprice_ = 0;
    lowerlimitprice_ = 0;
    predelta_ = 0;
    currdelta_ = 0;
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
    updatemillisec_ = 0;
    bidprice1_ = 0;
    bidvolume1_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    askprice1_ = 0;
    askvolume1_ = 0;
    bidprice2_ = 0;
    bidvolume2_ = 0;
    askprice2_ = 0;
    askvolume2_ = 0;
    bidprice3_ = 0;
    bidvolume3_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    askprice3_ = 0;
    askvolume3_ = 0;
    bidprice4_ = 0;
    bidvolume4_ = 0;
    askprice4_ = 0;
    askvolume4_ = 0;
    bidprice5_ = 0;
    bidvolume5_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    askprice5_ = 0;
    askvolume5_ = 0;
    averageprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTPTickRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TradingDay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_LastPrice;
        break;
      }

      // optional double LastPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PreSettlementPrice;
        break;
      }

      // optional double PreSettlementPrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_PreClosePrice;
        break;
      }

      // optional double PreClosePrice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));
          set_has_precloseprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_PreOpenInterest;
        break;
      }

      // optional double PreOpenInterest = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preopeninterest_)));
          set_has_preopeninterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_OpenPrice;
        break;
      }

      // optional double OpenPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_HighestPrice;
        break;
      }

      // optional double HighestPrice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HighestPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highestprice_)));
          set_has_highestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_LowestPrice;
        break;
      }

      // optional double LowestPrice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LowestPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowestprice_)));
          set_has_lowestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_Turnover;
        break;
      }

      // optional double Turnover = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_OpenInterest;
        break;
      }

      // optional double OpenInterest = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_ClosePrice;
        break;
      }

      // optional double ClosePrice = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_SettlementPrice;
        break;
      }

      // optional double SettlementPrice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_UpperLimitPrice;
        break;
      }

      // optional double UpperLimitPrice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UpperLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimitprice_)));
          set_has_upperlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_LowerLimitPrice;
        break;
      }

      // optional double LowerLimitPrice = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LowerLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimitprice_)));
          set_has_lowerlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PreDelta;
        break;
      }

      // optional double PreDelta = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predelta_)));
          set_has_predelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_CurrDelta;
        break;
      }

      // optional double CurrDelta = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurrDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currdelta_)));
          set_has_currdelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_UpdateTime;
        break;
      }

      // optional string UpdateTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdateMillisec;
        break;
      }

      // optional int32 UpdateMillisec = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatemillisec_)));
          set_has_updatemillisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_BidPrice1;
        break;
      }

      // optional double BidPrice1 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_BidVolume1;
        break;
      }

      // optional int32 BidVolume1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume1_)));
          set_has_bidvolume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_AskPrice1;
        break;
      }

      // optional double AskPrice1 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_AskVolume1;
        break;
      }

      // optional int32 AskVolume1 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume1_)));
          set_has_askvolume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_BidPrice2;
        break;
      }

      // optional double BidPrice2 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice2_)));
          set_has_bidprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_BidVolume2;
        break;
      }

      // optional int32 BidVolume2 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume2_)));
          set_has_bidvolume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_AskPrice2;
        break;
      }

      // optional double AskPrice2 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice2_)));
          set_has_askprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_AskVolume2;
        break;
      }

      // optional int32 AskVolume2 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume2_)));
          set_has_askvolume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_BidPrice3;
        break;
      }

      // optional double BidPrice3 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice3_)));
          set_has_bidprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_BidVolume3;
        break;
      }

      // optional int32 BidVolume3 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume3_)));
          set_has_bidvolume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_AskPrice3;
        break;
      }

      // optional double AskPrice3 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice3_)));
          set_has_askprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_AskVolume3;
        break;
      }

      // optional int32 AskVolume3 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume3_)));
          set_has_askvolume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_BidPrice4;
        break;
      }

      // optional double BidPrice4 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice4_)));
          set_has_bidprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_BidVolume4;
        break;
      }

      // optional int32 BidVolume4 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume4_)));
          set_has_bidvolume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_AskPrice4;
        break;
      }

      // optional double AskPrice4 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice4_)));
          set_has_askprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_AskVolume4;
        break;
      }

      // optional int32 AskVolume4 = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume4_)));
          set_has_askvolume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_BidPrice5;
        break;
      }

      // optional double BidPrice5 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice5_)));
          set_has_bidprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_BidVolume5;
        break;
      }

      // optional int32 BidVolume5 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume5_)));
          set_has_bidvolume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_AskPrice5;
        break;
      }

      // optional double AskPrice5 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice5_)));
          set_has_askprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_AskVolume5;
        break;
      }

      // optional int32 AskVolume5 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume5_)));
          set_has_askvolume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_AveragePrice;
        break;
      }

      // optional double AveragePrice = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AveragePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTPTickRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string TradingDay = 1;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tradingday(), output);
  }

  // optional string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrumentid(), output);
  }

  // optional string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchangeid(), output);
  }

  // optional string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exchangeinstid(), output);
  }

  // optional double LastPrice = 5;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lastprice(), output);
  }

  // optional double PreSettlementPrice = 6;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->presettlementprice(), output);
  }

  // optional double PreClosePrice = 7;
  if (has_precloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->precloseprice(), output);
  }

  // optional double PreOpenInterest = 8;
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->preopeninterest(), output);
  }

  // optional double OpenPrice = 9;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openprice(), output);
  }

  // optional double HighestPrice = 10;
  if (has_highestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->highestprice(), output);
  }

  // optional double LowestPrice = 11;
  if (has_lowestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lowestprice(), output);
  }

  // optional int32 Volume = 12;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volume(), output);
  }

  // optional double Turnover = 13;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->turnover(), output);
  }

  // optional double OpenInterest = 14;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->openinterest(), output);
  }

  // optional double ClosePrice = 15;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->closeprice(), output);
  }

  // optional double SettlementPrice = 16;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->settlementprice(), output);
  }

  // optional double UpperLimitPrice = 17;
  if (has_upperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->upperlimitprice(), output);
  }

  // optional double LowerLimitPrice = 18;
  if (has_lowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lowerlimitprice(), output);
  }

  // optional double PreDelta = 19;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->predelta(), output);
  }

  // optional double CurrDelta = 20;
  if (has_currdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->currdelta(), output);
  }

  // optional string UpdateTime = 21;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->updatetime(), output);
  }

  // optional int32 UpdateMillisec = 22;
  if (has_updatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->updatemillisec(), output);
  }

  // optional double BidPrice1 = 23;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->bidprice1(), output);
  }

  // optional int32 BidVolume1 = 24;
  if (has_bidvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->bidvolume1(), output);
  }

  // optional double AskPrice1 = 25;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->askprice1(), output);
  }

  // optional int32 AskVolume1 = 26;
  if (has_askvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->askvolume1(), output);
  }

  // optional double BidPrice2 = 27;
  if (has_bidprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->bidprice2(), output);
  }

  // optional int32 BidVolume2 = 28;
  if (has_bidvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->bidvolume2(), output);
  }

  // optional double AskPrice2 = 29;
  if (has_askprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->askprice2(), output);
  }

  // optional int32 AskVolume2 = 30;
  if (has_askvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->askvolume2(), output);
  }

  // optional double BidPrice3 = 31;
  if (has_bidprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->bidprice3(), output);
  }

  // optional int32 BidVolume3 = 32;
  if (has_bidvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->bidvolume3(), output);
  }

  // optional double AskPrice3 = 33;
  if (has_askprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->askprice3(), output);
  }

  // optional int32 AskVolume3 = 34;
  if (has_askvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->askvolume3(), output);
  }

  // optional double BidPrice4 = 35;
  if (has_bidprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->bidprice4(), output);
  }

  // optional int32 BidVolume4 = 36;
  if (has_bidvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->bidvolume4(), output);
  }

  // optional double AskPrice4 = 37;
  if (has_askprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->askprice4(), output);
  }

  // optional int32 AskVolume4 = 38;
  if (has_askvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->askvolume4(), output);
  }

  // optional double BidPrice5 = 39;
  if (has_bidprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->bidprice5(), output);
  }

  // optional int32 BidVolume5 = 40;
  if (has_bidvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->bidvolume5(), output);
  }

  // optional double AskPrice5 = 41;
  if (has_askprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->askprice5(), output);
  }

  // optional int32 AskVolume5 = 42;
  if (has_askvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->askvolume5(), output);
  }

  // optional double AveragePrice = 43;
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->averageprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTPTickRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string TradingDay = 1;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tradingday(), target);
  }

  // optional string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }

  // optional string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeinstid(), target);
  }

  // optional double LastPrice = 5;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lastprice(), target);
  }

  // optional double PreSettlementPrice = 6;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->presettlementprice(), target);
  }

  // optional double PreClosePrice = 7;
  if (has_precloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->precloseprice(), target);
  }

  // optional double PreOpenInterest = 8;
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->preopeninterest(), target);
  }

  // optional double OpenPrice = 9;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openprice(), target);
  }

  // optional double HighestPrice = 10;
  if (has_highestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->highestprice(), target);
  }

  // optional double LowestPrice = 11;
  if (has_lowestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lowestprice(), target);
  }

  // optional int32 Volume = 12;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volume(), target);
  }

  // optional double Turnover = 13;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->turnover(), target);
  }

  // optional double OpenInterest = 14;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->openinterest(), target);
  }

  // optional double ClosePrice = 15;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->closeprice(), target);
  }

  // optional double SettlementPrice = 16;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->settlementprice(), target);
  }

  // optional double UpperLimitPrice = 17;
  if (has_upperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->upperlimitprice(), target);
  }

  // optional double LowerLimitPrice = 18;
  if (has_lowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lowerlimitprice(), target);
  }

  // optional double PreDelta = 19;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->predelta(), target);
  }

  // optional double CurrDelta = 20;
  if (has_currdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->currdelta(), target);
  }

  // optional string UpdateTime = 21;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->updatetime(), target);
  }

  // optional int32 UpdateMillisec = 22;
  if (has_updatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->updatemillisec(), target);
  }

  // optional double BidPrice1 = 23;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->bidprice1(), target);
  }

  // optional int32 BidVolume1 = 24;
  if (has_bidvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->bidvolume1(), target);
  }

  // optional double AskPrice1 = 25;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->askprice1(), target);
  }

  // optional int32 AskVolume1 = 26;
  if (has_askvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->askvolume1(), target);
  }

  // optional double BidPrice2 = 27;
  if (has_bidprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->bidprice2(), target);
  }

  // optional int32 BidVolume2 = 28;
  if (has_bidvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->bidvolume2(), target);
  }

  // optional double AskPrice2 = 29;
  if (has_askprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->askprice2(), target);
  }

  // optional int32 AskVolume2 = 30;
  if (has_askvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->askvolume2(), target);
  }

  // optional double BidPrice3 = 31;
  if (has_bidprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->bidprice3(), target);
  }

  // optional int32 BidVolume3 = 32;
  if (has_bidvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->bidvolume3(), target);
  }

  // optional double AskPrice3 = 33;
  if (has_askprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->askprice3(), target);
  }

  // optional int32 AskVolume3 = 34;
  if (has_askvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->askvolume3(), target);
  }

  // optional double BidPrice4 = 35;
  if (has_bidprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->bidprice4(), target);
  }

  // optional int32 BidVolume4 = 36;
  if (has_bidvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->bidvolume4(), target);
  }

  // optional double AskPrice4 = 37;
  if (has_askprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->askprice4(), target);
  }

  // optional int32 AskVolume4 = 38;
  if (has_askvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->askvolume4(), target);
  }

  // optional double BidPrice5 = 39;
  if (has_bidprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->bidprice5(), target);
  }

  // optional int32 BidVolume5 = 40;
  if (has_bidvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->bidvolume5(), target);
  }

  // optional double AskPrice5 = 41;
  if (has_askprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->askprice5(), target);
  }

  // optional int32 AskVolume5 = 42;
  if (has_askvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->askvolume5(), target);
  }

  // optional double AveragePrice = 43;
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->averageprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTPTickRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TradingDay = 1;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // optional string InstrumentID = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional string ExchangeID = 3;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string ExchangeInstID = 4;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }

    // optional double LastPrice = 5;
    if (has_lastprice()) {
      total_size += 1 + 8;
    }

    // optional double PreSettlementPrice = 6;
    if (has_presettlementprice()) {
      total_size += 1 + 8;
    }

    // optional double PreClosePrice = 7;
    if (has_precloseprice()) {
      total_size += 1 + 8;
    }

    // optional double PreOpenInterest = 8;
    if (has_preopeninterest()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double OpenPrice = 9;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double HighestPrice = 10;
    if (has_highestprice()) {
      total_size += 1 + 8;
    }

    // optional double LowestPrice = 11;
    if (has_lowestprice()) {
      total_size += 1 + 8;
    }

    // optional int32 Volume = 12;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional double Turnover = 13;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // optional double OpenInterest = 14;
    if (has_openinterest()) {
      total_size += 1 + 8;
    }

    // optional double ClosePrice = 15;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

    // optional double SettlementPrice = 16;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double UpperLimitPrice = 17;
    if (has_upperlimitprice()) {
      total_size += 2 + 8;
    }

    // optional double LowerLimitPrice = 18;
    if (has_lowerlimitprice()) {
      total_size += 2 + 8;
    }

    // optional double PreDelta = 19;
    if (has_predelta()) {
      total_size += 2 + 8;
    }

    // optional double CurrDelta = 20;
    if (has_currdelta()) {
      total_size += 2 + 8;
    }

    // optional string UpdateTime = 21;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

    // optional int32 UpdateMillisec = 22;
    if (has_updatemillisec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatemillisec());
    }

    // optional double BidPrice1 = 23;
    if (has_bidprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume1 = 24;
    if (has_bidvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double AskPrice1 = 25;
    if (has_askprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume1 = 26;
    if (has_askvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume1());
    }

    // optional double BidPrice2 = 27;
    if (has_bidprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume2 = 28;
    if (has_bidvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume2());
    }

    // optional double AskPrice2 = 29;
    if (has_askprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume2 = 30;
    if (has_askvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume2());
    }

    // optional double BidPrice3 = 31;
    if (has_bidprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume3 = 32;
    if (has_bidvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume3());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double AskPrice3 = 33;
    if (has_askprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume3 = 34;
    if (has_askvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume3());
    }

    // optional double BidPrice4 = 35;
    if (has_bidprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume4 = 36;
    if (has_bidvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume4());
    }

    // optional double AskPrice4 = 37;
    if (has_askprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume4 = 38;
    if (has_askvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume4());
    }

    // optional double BidPrice5 = 39;
    if (has_bidprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume5 = 40;
    if (has_bidvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume5());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double AskPrice5 = 41;
    if (has_askprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume5 = 42;
    if (has_askvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume5());
    }

    // optional double AveragePrice = 43;
    if (has_averageprice()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTPTickRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTPTickRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTPTickRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTPTickRecord::MergeFrom(const CTPTickRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_precloseprice()) {
      set_precloseprice(from.precloseprice());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highestprice()) {
      set_highestprice(from.highestprice());
    }
    if (from.has_lowestprice()) {
      set_lowestprice(from.lowestprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upperlimitprice()) {
      set_upperlimitprice(from.upperlimitprice());
    }
    if (from.has_lowerlimitprice()) {
      set_lowerlimitprice(from.lowerlimitprice());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
    if (from.has_currdelta()) {
      set_currdelta(from.currdelta());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_updatemillisec()) {
      set_updatemillisec(from.updatemillisec());
    }
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_bidvolume1()) {
      set_bidvolume1(from.bidvolume1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_askvolume1()) {
      set_askvolume1(from.askvolume1());
    }
    if (from.has_bidprice2()) {
      set_bidprice2(from.bidprice2());
    }
    if (from.has_bidvolume2()) {
      set_bidvolume2(from.bidvolume2());
    }
    if (from.has_askprice2()) {
      set_askprice2(from.askprice2());
    }
    if (from.has_askvolume2()) {
      set_askvolume2(from.askvolume2());
    }
    if (from.has_bidprice3()) {
      set_bidprice3(from.bidprice3());
    }
    if (from.has_bidvolume3()) {
      set_bidvolume3(from.bidvolume3());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_askprice3()) {
      set_askprice3(from.askprice3());
    }
    if (from.has_askvolume3()) {
      set_askvolume3(from.askvolume3());
    }
    if (from.has_bidprice4()) {
      set_bidprice4(from.bidprice4());
    }
    if (from.has_bidvolume4()) {
      set_bidvolume4(from.bidvolume4());
    }
    if (from.has_askprice4()) {
      set_askprice4(from.askprice4());
    }
    if (from.has_askvolume4()) {
      set_askvolume4(from.askvolume4());
    }
    if (from.has_bidprice5()) {
      set_bidprice5(from.bidprice5());
    }
    if (from.has_bidvolume5()) {
      set_bidvolume5(from.bidvolume5());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_askprice5()) {
      set_askprice5(from.askprice5());
    }
    if (from.has_askvolume5()) {
      set_askvolume5(from.askvolume5());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTPTickRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTPTickRecord::CopyFrom(const CTPTickRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTPTickRecord::IsInitialized() const {

  return true;
}

void CTPTickRecord::Swap(CTPTickRecord* other) {
  if (other != this) {
    std::swap(tradingday_, other->tradingday_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(precloseprice_, other->precloseprice_);
    std::swap(preopeninterest_, other->preopeninterest_);
    std::swap(openprice_, other->openprice_);
    std::swap(highestprice_, other->highestprice_);
    std::swap(lowestprice_, other->lowestprice_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(upperlimitprice_, other->upperlimitprice_);
    std::swap(lowerlimitprice_, other->lowerlimitprice_);
    std::swap(predelta_, other->predelta_);
    std::swap(currdelta_, other->currdelta_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(updatemillisec_, other->updatemillisec_);
    std::swap(bidprice1_, other->bidprice1_);
    std::swap(bidvolume1_, other->bidvolume1_);
    std::swap(askprice1_, other->askprice1_);
    std::swap(askvolume1_, other->askvolume1_);
    std::swap(bidprice2_, other->bidprice2_);
    std::swap(bidvolume2_, other->bidvolume2_);
    std::swap(askprice2_, other->askprice2_);
    std::swap(askvolume2_, other->askvolume2_);
    std::swap(bidprice3_, other->bidprice3_);
    std::swap(bidvolume3_, other->bidvolume3_);
    std::swap(askprice3_, other->askprice3_);
    std::swap(askvolume3_, other->askvolume3_);
    std::swap(bidprice4_, other->bidprice4_);
    std::swap(bidvolume4_, other->bidvolume4_);
    std::swap(askprice4_, other->askprice4_);
    std::swap(askvolume4_, other->askvolume4_);
    std::swap(bidprice5_, other->bidprice5_);
    std::swap(bidvolume5_, other->bidvolume5_);
    std::swap(askprice5_, other->askprice5_);
    std::swap(askvolume5_, other->askvolume5_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTPTickRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTPTickRecord_descriptor_;
  metadata.reflection = CTPTickRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CTPMarket

// @@protoc_insertion_point(global_scope)
